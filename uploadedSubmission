//Max, Olivier, Eera, Alex


let img;
let grab;
let rollingsum0 = 0;
let rollingsum1 = 0;
let rollingsum2 = 0;
let allValues = []
let resox;
let resoy;
let pixsize;
let done = 2;
let inputt;
let colored
let tempVar = 120;
let nLength = 60;
let tempoAVG = 0
// Melody Object for C Major
let melody = {
  name: 'C Major Scale',
// This index determines what notes get played and in what order. Each is associated with a frequency in the frequencies array.
  notesIndex: [],
  tempo: tempVar
};

// Calculate duration of each note in seconds.
let noteDuration = nLength / melody.tempo;

// Variable for frequency (middle C).
let myFreq = 262;

// Array of frequencies in C Major.
let frequencies = [
  myFreq * 0.9,
  myFreq,
  (myFreq * 9) / 8,
  (myFreq * 5) / 4,
  (myFreq * 4) / 3,
  (myFreq * 3) / 2,
  (myFreq * 5) / 3,
  (myFreq * 15) / 8,
  myFreq * 2,
  myFreq * 2.2,
];
// Empty array for oscillator objects.
let oscillators = [];


//UI variables
let roundEdge = 10;
let imgDimension = 100;
let imgRatio = 2;
let txtSizer = 30;

//visualizer variables
let fft; // visualizing sound 
let visualizerColors = []; //store colors from image 

 function preload(){
  backgroundImage = loadImage("backgrounder.png");
}


function setup() {
//creates objects and triggers the UI setup
  createCanvas(600, 600);
  imageMode(CENTER);
  inputt = createFileInput(handleFile);
  inputt.position(180, 60);
  // Initialize oscillators and place in oscillators array.
  for (let freq of frequencies) {
    osc = new p5.Oscillator(freq);
    osc.setType('sawtooth');
    oscillators.push(osc);
  }
  fft = new p5.FFT(); // other setup code
}





function mousePressed() {
//activates all object/function click triggers
if(done === 1){
//waits for a second click after displaying the image to convert
fractalize();
done = 2;
}
// reso1.clicked();
// reso2.clicked();
// pixs.clicked();
convertClicked();
play();
}






function draw(){
  image(backgroundImage,300,300);
  stroke(234,41,2);
  fill(135,37,1);
  rect(170,40,310,60,roundEdge); //input file
  rect(170,120,400,400,roundEdge); //img spot
  rect(40,120,120,400,roundEdge); //visualizer spot
    if(mouseX > 510 && mouseX < 570 && mouseY > 40 && mouseY < 100 && img){
     fill(204,70,22);
     }
  rect(510,40,60,60,roundEdge); //play button
  noStroke();
  fill(0);
  triangle(530,60,530,80,550,70);
    noStroke();
    fill(255);
  if(done == 1){
     inputt.hide();
    textSize(20);
    text('Press the play button twice!',180,80)
     }
    textSize(txtSizer);
  text('How do',40,txtSizer+10);
  text('Images', 40,txtSizer+txtSizer+10);
  text('Sound?', 40,txtSizer+10+(txtSizer*2));

  
  if (img) {
    imgDimension = 398;
    imgRatio = round(img.width/img.height);
    image(img,370,320, round(imgDimension), imgDimension/imgRatio);
  }
  
  drawVisualizer ();
}

function drawVisualizer(){
  let spectrum = fft.analyze(); //analyze audio
  noStroke();
  for (let i = 0; i < spectrum.length && i < visualizerColors.length; i++){
    let amp = spectrum[i];
    let y = map(amp, 0, 256, height, 200);
    let barWidth = 110 / spectrum.length;
    fill(visualizerColors[i]); //from image
    rect((i * barWidth)+50, y-82, barWidth - 1, height -y);
  }
}

function handleFile(file) {
    //allows images to be uploaded from the computer and saves them to the image variable
      if(file.type === 'image') {
        img = createImg(file.data, '');
        img.hide();
      }else {
        img = null;
      }
    }



//IMAGE LOADING - RELEVANT

function convertClicked(){
//loads the image to prepare for conversion
if(mouseX > 510 && mouseX < 570 && mouseY > 40 && mouseY < 100 && done === 2 && img){
resox = 600;
resoy = 600;
pixsize = 20;
done = 1;
inputt.hide();
}
}

function fractalize() {
    melody.notesIndex = [];
    colorMode(RGB);
    loadPixels();
      for (let w = 0; w < resox; w += pixsize) {
        for (let h = 0; h < resoy; h += pixsize) {
          for (let x = 0; x < pixsize; x++){
            for(let y = 0; y < pixsize; y++){
              grab = get(w+x, h+y);
              rollingsum0 = rollingsum0 + grab[0];
              rollingsum1 = rollingsum1 + grab[1];
              rollingsum2 = rollingsum2 + grab[2];
            }
          }
    colored = color(round(rollingsum0 / (pixsize * pixsize)),round(rollingsum1 / (pixsize * pixsize)),round(rollingsum2 / (pixsize * pixsize)))
    allValues.push(colored);
    visualizerColors.push(colored); //add visualizer colors
    rollingsum0 = 0;
    rollingsum1 = 0;
    rollingsum2 = 0;
    noStroke();
    fill(colored);
    rectMode(CORNER);
    rect(w,h,pixsize,pixsize);
    colored = 0;
        }
      }
  print(allValues);
  for(let x = 0; x < allValues.length; x++){
  melody.notesIndex.push(round(map(hue(allValues[x]),0,360,1,9)));
  tempoAVG += lightness(allValues[x]);
  }
  melody.tempo = map(tempoAVG/allValues.length,0,100,60,360);
  tempoAVG = 0;
  print(melody.notesIndex);
  print(melody.tempo);
  allValues = [];
    }
    // Starts playing the note.
function playNote(n) {
  // Starts oscillator if needed.
if (oscillators[n].started === false) {
  oscillators[n].start();
  // Starts playing the note by increasing the volume with a 0.01 sec fade-in.
    oscillators[n].amp(1, 0.01);
  }
  // Stops playing the note after number of seconds stored in noteDuration
setTimeout(stopNote, noteDuration * 1000, n);
}

// Stops playing the note.
function stopNote(n) {
  // Lower oscillator volume to 0.
  oscillators[n].amp(0, 0.01);
  
  // Stop the oscillator.
  oscillators[n].stop();
}

// Plays the notes in a melody.
function play() {
  // Read each [index, note] in melody.notesIndex
  for (let [index, note] of melody.notesIndex.entries()) {
    // Play each note at scheduled time
    let freq = frequencies[note % frequencies.length];
      let env = new p5.Env();
      let osc = new p5.Oscillator(freq);
      osc.start();
      osc.amp(env); 
      env.setADSR(0.05, 0.1, 0.5, 0.5);
      env.play();
    setTimeout(playNote, noteDuration * 1000 * index, note);
  }
}
